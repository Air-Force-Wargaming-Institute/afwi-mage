#!/usr/bin/env python3
"""
Docker startup script for the embedding service.
This script handles importing and starting the application directly, 
avoiding Python module path issues.
"""

import os
import sys
import importlib.util
import uvicorn

# Print current environment for debugging
print("\n==========")
print("== ENVIRONMENT ==")
print("==========\n")

# Add all possible paths to ensure imports work correctly
print("\n==========")
print("== PATHS ==")
print("==========\n")

current_dir = os.path.abspath('.')
print(f"Current directory: {current_dir}")

# Add the current directory to the path
sys.path.insert(0, current_dir)

# Ensure /app and its subdirectories are in the path (for Docker)
app_dir = '/app'
if os.path.exists(app_dir):
    if app_dir not in sys.path:
        sys.path.insert(0, app_dir)
    
    # Add all subdirectories to the path
    for subdir in ['api', 'core', 'utils', 'models', 'routers']:
        full_path = os.path.join(app_dir, subdir)
        if os.path.exists(full_path) and full_path not in sys.path:
            sys.path.insert(0, full_path)

print(f"Python path after updates: {sys.path}")

# Ensure package initialization
for pkg in ['api', 'core', 'utils']:
    init_file = os.path.join(current_dir, pkg, '__init__.py')
    if os.path.exists(os.path.dirname(init_file)) and not os.path.exists(init_file):
        print(f"Creating missing __init__.py in {os.path.dirname(init_file)}")
        with open(init_file, 'w') as f:
            f.write('# Auto-generated by docker-start.py\n')

# Load the main module directly
def import_from_file(module_name, file_path):
    print(f"Importing {module_name} from {file_path}")
    spec = importlib.util.spec_from_file_location(module_name, file_path)
    module = importlib.util.module_from_spec(spec)
    sys.modules[module_name] = module  # Register the module in sys.modules
    spec.loader.exec_module(module)
    return module

# Import the main module
print("Loading main.py...")
main_module = import_from_file("main", "main.py")

# Show debug info
print(f"Successfully loaded FastAPI app from main.py")

# Get the app instance
app = main_module.app

# Run the server
if __name__ == "__main__":
    host = os.environ.get("HOST", "0.0.0.0")
    port = int(os.environ.get("PORT", 8006))
    print(f"Starting server on {host}:{port}")
    uvicorn.run("docker-start:app", host=host, port=port, reload=False) 