name: afwi-multi-agent-generative-engine

networks:
  app-network:
    driver: bridge

services:
  init-data:
    image: busybox
    volumes:
      - ../data:/data
    command: >
      sh -c "mkdir -p /data/uploads && chmod -R 777 /data/uploads"

  core:
    build: ./core_service
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/dbname
      - UPLOAD_SERVICE_URL=http://upload:8005
      - EXTRACTION_SERVICE_URL=http://extraction:8002
      - GENERATION_SERVICE_URL=http://generation:8003
      - AGENT_SERVICE_URL=http://agent:8001
      - REVIEW_SERVICE_URL=http://review:8004
      - EMBEDDING_SERVICE_URL=http://embedding:8006
      - DEBUG=1
      - PYTHONUNBUFFERED=1
    volumes:
      - ../data:/app/data:rw
    depends_on:
      init-data:
        condition: service_completed_successfully
    restart: unless-stopped
    networks:
      - app-network

  chat:
    build: ./chat_service
    ports:
      - "8009:8009"
    environment:
      - CORE_SERVICE_URL=http://core:8000
    volumes:
      - ../data:/app/data
      - ./chat_service:/app
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - init-data
    networks:
      - app-network

  agent:
    build: ./agent_service
    ports:
      - "8001:8001"
    volumes:
      - ../data:/app/data
      - ./models:/app/models
      - ./agent_service:/app
      - ./agent_service/agents:/app/agents
    environment:
      - PYTHONPATH=/app
      - CORE_SERVICE_URL=http://core:8000
    depends_on:
      - init-data
    networks:
      - app-network

  extraction:
    build: ./extraction_service
    ports:
      - "8002:8002"
    volumes:
      - ../data:/app/data
      - ./models:/app/models
      - ./extraction_service:/app
      - nltk_data_volume:/app/nltk_data
    depends_on:
      - init-data
    networks:
      - app-network

  generation:
    build: ./generation_service
    ports:
      - "8003:8003"
    volumes:
      - ../data:/app/data
      - ./models:/app/models
      - ./generation_service:/app
    environment:
      - CORE_SERVICE_URL=http://core:8000
    depends_on:
      - init-data
    networks:
      - app-network

  review:
    build: ./review_service
    ports:
      - "8004:8004"
    volumes:
      - ../data:/app/data
      - ../models:/app/models
      - ./review_service:/app
    environment:
      - CORE_SERVICE_URL=http://core:8000
    depends_on:
      - init-data
    networks:
      - app-network

  upload:
    build: ./upload_service
    ports:
      - "8005:8005"
    volumes:
      - ../data:/app/data
      - ./models:/app/models
      - ./upload_service:/app
    environment:
      - CORE_SERVICE_URL=http://core:8000
    depends_on:
      - init-data
    networks:
      - app-network

  api_gateway:
    image: traefik:v3.3.4
    container_name: mage_api_gateway
    command:
      - "--configFile=/etc/traefik/traefik.yaml"
    ports:
      - "80:80"
      - "8080:8080"  # localhost:8080/dashboard
      - "8082:8082"  # localhost:8082/metrics
      - "8083:8083"  # NEW: localhost:8083/ping
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./api_gateway/traefik.yaml:/etc/traefik/traefik.yaml:ro
      - ./api_gateway/dynamic_conf.yaml:/etc/traefik/dynamic/dynamic_conf.yaml
      - ../data/logs/traefik:/var/log/traefik
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "http://localhost:8083/ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  db:
   image: postgres:13
   environment:
     POSTGRES_USER: ${POSTGRES_USER:-postgres}
     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
     POSTGRES_MULTIPLE_DATABASES: dbname,authdb
   volumes:
     - postgres_data:/var/lib/postgresql/data
     - ./init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
   networks:
     - app-network
   healthcheck:
     test: ["CMD-SHELL", "pg_isready -U postgres"]
     interval: 5s
     timeout: 5s
     retries: 5
     start_period: 10s
   ports:
     - "5432:5432"

  embedding:
    build: ./embedding_service
    ports:
      - "8006:8006"
    volumes:
      - ../data:/app/data
      - ./models:/app/models
      - ./embedding_service:/app
    environment:
      - CORE_SERVICE_URL=http://core:8000
      - API_KEY='None'
      - BASE_URL='None'
    depends_on:
      - init-data
    networks:
      - app-network

  auth:
   build: ./auth_service
   volumes:
     - ./auth_service:/app
   depends_on:
     db:
       condition: service_healthy
   environment:
     - DATABASE_URL=postgresql://postgres:password@db:5432/authdb
     - SECRET_KEY=your-secret-key-here-change-in-production
     - DISABLE_AUTH=false
     - CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
     - ACCESS_TOKEN_EXPIRE_MINUTES=1440
     - PORT=8010
     - HOST=0.0.0.0
     - PYTHONUNBUFFERED=1
   ports:
     - "8010:8010"
   restart: always
   networks:
     - app-network

  direct_chat_service1:
    build: ./direct_chat_service
    ports:
      - "8011:8011"
    volumes:
      - ../data:/app/data
      - ./direct_chat_service:/app
    environment:
      - CORE_SERVICE_URL=http://core:8000
      - PYTHONPATH=/app
      - SERVICE_PORT=8011
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - init-data
    networks:
      - app-network
    command: uvicorn app:app --host 0.0.0.0 --port 8011 --reload --timeout-keep-alive 75 --limit-concurrency 100 --backlog 100

volumes:
  postgres_data:
  nltk_data_volume:

