# .gitlab-ci.yml
stages:
  - security_scan

variables:
  REPORT_DIR: "security_reports"

security-scan:
  stage: security_scan
  tags:
    - windows
  before_script:
    # Create reports directory
    - |
      if (Test-Path $env:REPORT_DIR) {
        Remove-Item -Path $env:REPORT_DIR -Recurse -Force
      }
      New-Item -ItemType Directory -Force -Path $env:REPORT_DIR
    
    # Install Python dependencies
    - python -m pip install --upgrade pip
    - pip install bandit==1.7.5 --no-cache-dir
    
    # Install Node.js dependencies
    - npm install -g eslint@8.56.0 eslint-plugin-security@1.7.1 --no-audit

  script:
    # Initialize results files
    - |
      "filename,test_name,test_id,issue_severity,issue_text,issue_confidence,line_number,line_range,more_info" | Out-File -FilePath "$env:REPORT_DIR\python_sast.csv"
      "file,rule_id,severity,message,line,column" | Out-File -FilePath "$env:REPORT_DIR\js_sast.csv"

    # Python Security Scan
    - |
      Write-Host "Running Python security scan..."
      $pythonDirs = @(
        "backend/agent_service",
        "backend/auth_service",
        "backend/chat_service",
        "backend/core_service",
        "backend/direct_chat_service",
        "backend/embedding_service",
        "backend/extraction_service",
        "backend/generation_service",
        "backend/review_service",
        "backend/upload_service",
        "backend/tools"
      )
      
      foreach ($dir in $pythonDirs) {
        if (Test-Path $dir) {
          Write-Host "Scanning $dir..."
          bandit -r $dir -f csv -o "$env:REPORT_DIR\temp.csv" 2>&1
          if (Test-Path "$env:REPORT_DIR\temp.csv") {
            $content = Get-Content "$env:REPORT_DIR\temp.csv" | Select-Object -Skip 1
            $content | Add-Content "$env:REPORT_DIR\python_sast.csv"
            Remove-Item "$env:REPORT_DIR\temp.csv"
          }
        }
      }

    # JavaScript Security Scan
    - |
      Write-Host "Running JavaScript security scan..."
      $eslintConfig = '{
        "plugins": ["security"],
        "extends": ["plugin:security/recommended"],
        "parserOptions": {
          "ecmaVersion": 2022
        },
        "env": {
          "es6": true,
          "node": true,
          "browser": true
        }
      }'
      $eslintConfig | Out-File -FilePath ".eslintrc.json"
      
      Get-ChildItem -Path "frontend/src" -Recurse -Include "*.js","*.jsx","*.ts","*.tsx" -Exclude "node_modules" |
      ForEach-Object {
        Write-Host "Scanning $($_.FullName)..."
        $result = eslint --format=json --quiet $_.FullName 2>&1
        if ($result) {
          $json = $result | ConvertFrom-Json
          foreach ($file in $json) {
            foreach ($msg in $file.messages) {
              "$($_.Name),$($msg.ruleId),$($msg.severity),$($msg.message),$($msg.line),$($msg.column)" |
              Add-Content "$env:REPORT_DIR\js_sast.csv"
            }
          }
        }
      }

    # Generate summary report
    - |
      Write-Host "Generating summary report..."
      "# Security Scan Summary" | Out-File -FilePath "$env:REPORT_DIR\sast-report.txt"
      "" | Add-Content "$env:REPORT_DIR\sast-report.txt"
      
      "## Python Security Issues" | Add-Content "$env:REPORT_DIR\sast-report.txt"
      $pythonIssues = Import-Csv "$env:REPORT_DIR\python_sast.csv"
      "Found $($pythonIssues.Count) issues in Python code" | Add-Content "$env:REPORT_DIR\sast-report.txt"
      "" | Add-Content "$env:REPORT_DIR\sast-report.txt"
      
      "## JavaScript Security Issues" | Add-Content "$env:REPORT_DIR\sast-report.txt"
      $jsIssues = Import-Csv "$env:REPORT_DIR\js_sast.csv"
      "Found $($jsIssues.Count) issues in JavaScript code" | Add-Content "$env:REPORT_DIR\sast-report.txt"

  after_script:
    # Cleanup temporary files
    - |
      if (Test-Path ".eslintrc.json") {
        Remove-Item ".eslintrc.json" -Force
      }

  artifacts:
    when: always
    paths:
      - "$env:REPORT_DIR/*.csv"
      - "$env:REPORT_DIR/*.txt"
    expire_in: 1 week
