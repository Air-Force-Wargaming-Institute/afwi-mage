# .gitlab-ci.yml
stages:
  - security_scan
  - report_aggregation

variables:
  # Configure output directories for artifacts
  REPORT_DIR: "security_reports"
  
# Base security scanning job template
.security_scan_template:
  before_script:
    - mkdir -p $REPORT_DIR

# Python dependency security scan
python-dependency-scan:
  stage: security_scan
  image: python:3.11-slim
  extends: .security_scan_template
  script:
    - pip install safety
    - |
      for req_file in $(find . -name "requirements.txt"); do
        echo "Scanning $req_file"
        safety check -r $req_file --output json | 
        jq -r '.[] | [.package, .analyzed_version, .vulnerable_spec, .advisory] | @csv' > 
        $REPORT_DIR/python_dependencies_$(echo $req_file | tr '/' '_').csv
      done
  artifacts:
    paths:
      - $REPORT_DIR/python_dependencies_*.csv
    expire_in: 1 week

# Node.js dependency security scan
node-dependency-scan:
  stage: security_scan
  image: node:16
  extends: .security_scan_template
  script:
    - npm install -g npm-audit-html
    - |
      for pkg_file in $(find . -name "package.json"); do
        echo "Scanning $pkg_file"
        cd $(dirname $pkg_file)
        npm audit --json | 
        jq -r '.advisories | to_entries | .[] | .value | [.module_name, .vulnerable_versions, .patched_versions, .title] | @csv' > 
        $CI_PROJECT_DIR/$REPORT_DIR/node_dependencies_$(echo $pkg_file | tr '/' '_').csv
        cd $CI_PROJECT_DIR
      done
  artifacts:
    paths:
      - $REPORT_DIR/node_dependencies_*.csv
    expire_in: 1 week

# Secret detection scan
secret-detection:
  stage: security_scan
  image: python:3.11-slim
  extends: .security_scan_template
  script:
    - pip install detect-secrets
    - |
      detect-secrets scan . --force-use-all-plugins | 
      jq -r '.results | to_entries | .[] | [.key, .value[].type, .value[].line_number] | @csv' > 
      $REPORT_DIR/detected_secrets.csv
  artifacts:
    paths:
      - $REPORT_DIR/detected_secrets.csv
    expire_in: 1 week

# Container base image scan
container-base-scan:
  stage: security_scan
  image: aquasec/trivy:latest
  extends: .security_scan_template
  script:
    - |
      for dockerfile in $(find . -name "Dockerfile"); do
        base_image=$(grep "^FROM" $dockerfile | head -1 | awk '{print $2}')
        echo "Scanning base image: $base_image from $dockerfile"
        trivy image --format csv --output $REPORT_DIR/container_base_$(echo $dockerfile | tr '/' '_').csv $base_image
      done
  artifacts:
    paths:
      - $REPORT_DIR/container_base_*.csv
    expire_in: 1 week

# SAST (Static Application Security Testing)
sast-scan:
  stage: security_scan
  image: python:3.11-slim
  extends: .security_scan_template
  script:
    - pip install bandit
    - |
      # Scan Python files
      bandit -r . -f csv -o $REPORT_DIR/python_sast_results.csv
    - |
      # Install and run ESLint for JavaScript files
      apt-get update && apt-get install -y nodejs npm
      npm install -g eslint eslint-config-security
      find . -name "*.js" -not -path "./node_modules/*" | 
      xargs eslint --format=json --no-eslintrc -c '{"extends": ["security"]}' |
      jq -r '.[] | [.filePath, .messages[].ruleId, .messages[].message, .messages[].line] | @csv' > 
      $REPORT_DIR/js_sast_results.csv
  artifacts:
    paths:
      - $REPORT_DIR/python_sast_results.csv
      - $REPORT_DIR/js_sast_results.csv
    expire_in: 1 week

# Aggregate all reports
aggregate-reports:
  stage: report_aggregation
  image: python:3.11-slim
  script:
    - |
      echo "Creating summary report..."
      echo "Security Scan Summary" > $REPORT_DIR/summary_report.csv
      echo "Scan Type,Total Issues Found,High Severity,Medium Severity,Low Severity" >> $REPORT_DIR/summary_report.csv
      
      # Count issues in Python dependencies
      python_deps=$(find $REPORT_DIR -name "python_dependencies_*.csv" | xargs cat | wc -l)
      echo "Python Dependencies,$python_deps,N/A,N/A,N/A" >> $REPORT_DIR/summary_report.csv
      
      # Count issues in Node.js dependencies
      node_deps=$(find $REPORT_DIR -name "node_dependencies_*.csv" | xargs cat | wc -l)
      echo "Node.js Dependencies,$node_deps,N/A,N/A,N/A" >> $REPORT_DIR/summary_report.csv
      
      # Count detected secrets
      secrets=$(cat $REPORT_DIR/detected_secrets.csv | wc -l)
      echo "Detected Secrets,$secrets,N/A,N/A,N/A" >> $REPORT_DIR/summary_report.csv
      
      # Count SAST issues
      sast_python=$(cat $REPORT_DIR/python_sast_results.csv | wc -l)
      sast_js=$(cat $REPORT_DIR/js_sast_results.csv | wc -l)
      echo "SAST (Python),$sast_python,N/A,N/A,N/A" >> $REPORT_DIR/summary_report.csv
      echo "SAST (JavaScript),$sast_js,N/A,N/A,N/A" >> $REPORT_DIR/summary_report.csv
  artifacts:
    paths:
      - $REPORT_DIR/*
    expire_in: 1 week
    reports:
      security: $REPORT_DIR/summary_report.csv