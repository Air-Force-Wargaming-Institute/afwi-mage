stages:
  - prebuild
  - security_scan
  - compliance
  - quality_gates
  - deploy
  - audit_trail

variables:
  DOCKER_HOST: "unix:///var/run/docker.sock"
  DOCKER_TLS_CERTDIR: ""

prebuild_checks:
  stage: prebuild
  image: python:3.11
  script:
    - set -x
    - python3.11 --version || (echo "Python 3.11 not found" && exit 1)
    - command -v nvidia-smi || echo "NVIDIA drivers not installed; skipping GPU check"
    - nvidia-smi || echo "nvidia-smi unavailable; proceeding without GPU metrics"
    - mkdir -p app/data/{uploads,extraction,datasets,outputs,logs,temp_conversions,builder/AGENTS,builder/TEAMS}
    - mkdir -p app/models/{base_models,fine_tuned_models}
    - mkdir -p app/nltk_data
  artifacts:
    paths:
      - app/data/logs

security_scan:
  stage: security_scan
  image: python:3.11
  script:
    - set -x
    - pip install bandit safety trufflehog pandas
    - bandit -r . -f json -o sast_report.json || true
    - safety check --json > dependency_check.json || true
    - trufflehog filesystem . --json > secret_detection.json || true
    - |
      python -c '
      import json, csv
      # Convert SAST report
      try:
          with open("sast_report.json") as f:
              data = json.load(f)
          with open("sast_report.csv", "w", newline="") as csvfile:
              writer = csv.writer(csvfile)
              writer.writerow(["filename", "issue", "severity"])
              for result in data.get("results", []):
                  writer.writerow([result.get("filename"), result.get("issue_text"), result.get("issue_severity")])
      except Exception as e:
          print(f"Error processing SAST report: {e}")

      # Convert Secret Detection
      try:
          with open("secret_detection.json") as f:
              data = json.load(f)
          with open("secret_detection.csv", "w", newline="") as csvfile:
              writer = csv.writer(csvfile)
              writer.writerow(["file", "string", "match"])
              for match in data.get("results", []):
                  writer.writerow([match.get("path"), match.get("stringsFound", []), match.get("printDiff", "")])
      except Exception as e:
          print(f"Error processing Secret Detection report: {e}")
      '
  artifacts:
    reports:
      sast: sast_report.json
    paths:
      - sast_report.json
      - dependency_check.json
      - secret_detection.json
      - sast_report.csv
      - dependency_check.csv
      - secret_detection.csv

compliance:
  stage: compliance
  image: alpine:latest
  script:
    - set -x
    - |
      cat <<'EOF' > direct_chat_healthcheck.yaml
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8011/api/v1/health"]
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 10s
      EOF
    - |
      cat <<'EOF' > database_healthcheck.yaml
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgres"]
        interval: 5s
        timeout: 5s
        retries: 5
      EOF
    - |
      cat <<'EOF' > service_dependencies.yaml
      depends_on:
        condition: service_healthy
      EOF
  artifacts:
    paths:
      - direct_chat_healthcheck.yaml
      - database_healthcheck.yaml
      - service_dependencies.yaml

quality_gates:
  stage: quality_gates
  image: alpine:latest
  dependencies:
    - security_scan
  script:
    - set -x
    - apk add --no-cache jq
    - |
      if [ -f coverage_report.xml ]; then
        COVERAGE=$(grep -o 'line-rate="[^"]*' coverage_report.xml | head -1 | cut -d'"' -f2 | awk '{printf "%d", $1 * 100}')
        echo "Coverage: ${COVERAGE}%" > quality_gate_summary.txt
        if [ "$COVERAGE" -lt 80 ]; then
          echo "Error: Code coverage is below 80%" >> quality_gate_summary.txt
          exit 1
        fi
      else
        echo "Warning: No coverage report found, skipping coverage check." > quality_gate_summary.txt
      fi
    - |
      HIGH_ISSUES=$(jq '.high_severity' sast_report.json)
      echo "High severity security issues: $HIGH_ISSUES" >> quality_gate_summary.txt
      if [ "$HIGH_ISSUES" -gt 0 ]; then
        echo "Error: High severity security issues found" >> quality_gate_summary.txt
        exit 1
      fi
  artifacts:
    paths:
      - quality_gate_summary.txt

deploy:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  only:
    - main
  when: manual
  before_script:
    - until docker info >/dev/null 2>&1; do sleep 3; echo "Waiting for Docker to be ready..."; done
  script:
    - set -x
    - docker-compose up -d
    - echo "Deployment completed successfully"
  environment:
    name: production

audit_trail:
  stage: audit_trail
  image: alpine:latest
  dependencies:
    - prebuild_checks
  script:
    - set -x
    - |
      echo "Audit Trail Summary" > audit_summary.txt
      echo "Date: $(date)" >> audit_summary.txt
      echo "Pipeline Run ID: $CI_PIPELINE_ID" >> audit_summary.txt
      echo "Branch: $CI_COMMIT_BRANCH" >> audit_summary.txt
      echo "Commit Hash: $CI_COMMIT_SHA" >> audit_summary.txt
    - tar -czf build_logs.tar.gz app/data/logs/
  artifacts:
    paths:
      - audit_summary.txt
      - build_logs.tar.gz
