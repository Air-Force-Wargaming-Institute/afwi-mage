# .gitlab-ci.yml

stages:
  - security_scan

variables:
  REPORT_DIR: "security_reports"
  BANDIT_VERSION: "1.7.5"
  ESLINT_VERSION: "8.56.0"
  ESLINT_PLUGIN_SECURITY_VERSION: "1.7.1"

default:
  interruptible: true
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

security-scan:
  stage: security_scan
  image: python:3.11
  before_script:
    # Install Node.js
    - curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
    - apt-get update && apt-get install -y nodejs

    # Create reports directory
    - mkdir -p $REPORT_DIR
    
    # Install Python dependencies
    - python -m pip install --upgrade pip
    - pip install bandit==$BANDIT_VERSION --no-cache-dir
    
    # Install Node.js dependencies
    - npm install -g eslint@$ESLINT_VERSION eslint-plugin-security@$ESLINT_PLUGIN_SECURITY_VERSION --no-audit

  script:
    # Initialize results files
    - echo "filename,test_name,test_id,issue_severity,issue_text,issue_confidence,line_number,line_range,more_info" > "$REPORT_DIR/python_sast.csv"
    - echo "file,rule_id,severity,message,line,column" > "$REPORT_DIR/js_sast.csv"

    # Python Security Scan
    - |
      echo "Running Python security scan..."
      python_dirs=(
        "backend/agent_service"
        "backend/auth_service"
        "backend/chat_service"
        "backend/core_service"
        "backend/direct_chat_service"
        "backend/embedding_service"
        "backend/extraction_service"
        "backend/generation_service"
        "backend/review_service"
        "backend/upload_service"
        "backend/tools"
      )
      
      for dir in "${python_dirs[@]}"; do
        if [ -d "$dir" ]; then
          echo "Scanning $dir..."
          bandit -r "$dir" -f csv -o "$REPORT_DIR/temp.csv" 2>/dev/null || true
          if [ -f "$REPORT_DIR/temp.csv" ]; then
            tail -n +2 "$REPORT_DIR/temp.csv" >> "$REPORT_DIR/python_sast.csv"
            rm "$REPORT_DIR/temp.csv"
          fi
        fi
      done

    # JavaScript Security Scan
    - |
      echo "Running JavaScript security scan..."
      cat > .eslintrc.json << 'EOF'
      {
        "plugins": ["security"],
        "extends": ["plugin:security/recommended"],
        "parserOptions": {
          "ecmaVersion": 2022
        },
        "env": {
          "es6": true,
          "node": true,
          "browser": true
        }
      }
      EOF

    # Create Python script for processing ESLint output
    - |
      cat > process_eslint.py << 'EOF'
      import sys
      import json
      
      try:
          for result in json.load(sys.stdin):
              for msg in result.get('messages', []):
                  print('{},{},{},{},{},{}'.format(
                      result['filePath'],
                      msg.get('ruleId',''),
                      msg.get('severity',''),
                      msg.get('message','').replace(',', ';'),
                      msg.get('line',''),
                      msg.get('column','')
                  ))
      except json.JSONDecodeError:
          pass
      except Exception as e:
          print('Error processing file:', str(e), file=sys.stderr)
      EOF

    # Run JavaScript scans
    - |
      echo "Scanning JavaScript/TypeScript files..."
      find frontend/src -type f \( -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" \) \
        -not -path "*/node_modules/*" | while read file; do
        echo "Scanning $file..."
        eslint --format=json --quiet "$file" 2>/dev/null | python3 process_eslint.py >> "$REPORT_DIR/js_sast.csv" || true
      done

    # Generate summary report
    - |
      {
        echo "# Security Scan Summary"
        echo
        echo "## Python Security Issues"
        python_count=$(tail -n +2 "$REPORT_DIR/python_sast.csv" | wc -l)
        echo "Found $python_count issues in Python code"
        echo
        echo "## JavaScript Security Issues"
        js_count=$(tail -n +2 "$REPORT_DIR/js_sast.csv" | wc -l)
        echo "Found $js_count issues in JavaScript code"
      } > "$REPORT_DIR/sast-report.txt"

  after_script:
    # Cleanup temporary files
    - rm -f .eslintrc.json process_eslint.py

  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    when: always
    expire_in: 1 week
    paths:
      - $REPORT_DIR/*.csv
      - $REPORT_DIR/*.txt
    reports:
      junit: $REPORT_DIR/*.csv
  
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_TAG
      when: never
