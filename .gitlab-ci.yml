stages:
  - prebuild
  - security_scan

prebuild_checks:
  stage: prebuild
  image: python:3.10
  script:
    - set -x
    - python3.10 --version || (echo "Python 3.10 not found" && exit 1)
    - python3.11 --version || (echo "Python 3.11 not found" && exit 1)
    - mkdir -p app/data/logs
    - ls -ld app/data/logs
  artifacts:
    paths:
      - app/data/logs

security_scan:
  stage: security_scan
  image: python:3.10
  script:
    - set -x
    # Install scanning tools
    - pip install bandit safety trufflehog
    # Run Bandit for static analysis; output JSON
    - bandit -r . -f json -o bandit_sast_report.json || true
    # Convert Bandit JSON report to CSV (extract key fields from results)
    - |
      if python -c "import json; json.load(open('bandit_sast_report.json'))" 2>/dev/null; then 
        python -c "import json, csv; report=json.load(open('bandit_sast_report.json')); f=csv.writer(open('bandit_sast_report.csv','w',newline='')); f.writerow(['filename','line_number','issue_severity','issue_confidence','issue_text','test_name']); [f.writerow([item.get('filename'), item.get('line_number'), item.get('issue_severity'), item.get('issue_confidence'), item.get('issue_text'), item.get('test_name')]) for item in report.get('results', [])]"
      else 
        echo "bandit_sast_report.json is not valid JSON, skipping CSV conversion"
        echo "filename,line_number,issue_severity,issue_confidence,issue_text,test_name" > bandit_sast_report.csv
      fi
    # Run Safety for dependency vulnerability checks; output JSON
    - safety check --json > safety_dependency_report.json || true
    # Convert Safety JSON output to CSV
    - |
      if python -c "import json; json.load(open('safety_dependency_report.json'))" 2>/dev/null; then 
        python -c "import json, csv; data=json.load(open('safety_dependency_report.json')); f=csv.writer(open('safety_dependency_report.csv','w',newline='')); f.writerow(['package','version']); [f.writerow([pkg.get('package'), pkg.get('version')]) for pkg in data.get('vulnerabilities',[])]"
      else 
        echo "safety_dependency_report.json is not valid JSON, skipping CSV conversion"
        echo "package,version" > safety_dependency_report.csv
      fi
    # Run TruffleHog to scan for secrets; output JSON
    - trufflehog filesystem . --json > trufflehog_secret_detection.json || true
    # Convert TruffleHog JSON output to CSV
    - |
      if python -c "import json; json.load(open('trufflehog_secret_detection.json'))" 2>/dev/null; then 
        python -c "import json, csv; data=json.load(open('trufflehog_secret_detection.json')); f=csv.writer(open('trufflehog_secret_detection.csv','w',newline='')); f.writerow(['file','line','reason','entropy']); [f.writerow([item.get('file'), item.get('line'), item.get('reason'), item.get('entropy')]) for item in data]"
      else 
        echo "trufflehog_secret_detection.json is not valid JSON, skipping CSV conversion"
        echo "file,line,reason,entropy" > trufflehog_secret_detection.csv
      fi
  artifacts:
    paths:
      - bandit_sast_report.json
      - bandit_sast_report.csv
      - safety_dependency_report.json
      - safety_dependency_report.csv
      - trufflehog_secret_detection.json
      - trufflehog_secret_detection.csv
