# .gitlab-ci.yml

stages:
  - security_scan

variables:
  REPORT_DIR: "security_reports"
  BANDIT_VERSION: "1.7.5"
  ESLINT_VERSION: "8.56.0"
  ESLINT_PLUGIN_SECURITY_VERSION: "1.7.1"

default:
  interruptible: true
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

security-scan:
  stage: security_scan
  image: python:3.11
  before_script:
    # Install Node.js
    - curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
    - apt-get update && apt-get install -y nodejs

    # Create reports directory
    - mkdir -p $env:REPORT_DIR
    
    # Install Python dependencies
    - python -m pip install --upgrade pip
    - pip install bandit==$env:BANDIT_VERSION --no-cache-dir
    
    # Install Node.js dependencies locally instead of globally
    - npm init -y
    - npm install eslint@$env:ESLINT_VERSION eslint-plugin-security@$env:ESLINT_PLUGIN_SECURITY_VERSION --save-dev
    - $env:PATH = "$(Get-Location)\node_modules\.bin;$env:PATH"

  script:
    # Initialize results files
    - echo "filename,test_name,test_id,issue_severity,issue_text,issue_confidence,line_number,line_range,more_info" | Out-File -FilePath "$env:REPORT_DIR\python_sast.csv"
    - echo "file,rule_id,severity,message,line,column" | Out-File -FilePath "$env:REPORT_DIR\js_sast.csv"

    # Python Security Scan
    - |
      Write-Host "Running Python security scan..."
      $python_dirs = @(
        "backend\agent_service",
        "backend\auth_service",
        "backend\chat_service",
        "backend\core_service",
        "backend\direct_chat_service",
        "backend\embedding_service",
        "backend\extraction_service",
        "backend\generation_service",
        "backend\review_service",
        "backend\upload_service",
        "backend\tools"
      )
      
      foreach ($dir in $python_dirs) {
        if (Test-Path $dir) {
          Write-Host "Scanning $dir..."
          bandit -r $dir -f csv -o "$env:REPORT_DIR\temp.csv" 2>$null
          if (Test-Path "$env:REPORT_DIR\temp.csv") {
            Get-Content "$env:REPORT_DIR\temp.csv" | Select-Object -Skip 1 | Add-Content "$env:REPORT_DIR\python_sast.csv"
            Remove-Item "$env:REPORT_DIR\temp.csv" -Force
          }
        }
      }

    # JavaScript Security Scan - Create ESLint config
    - |
      $eslintConfig = '{
        "plugins": ["security"],
        "extends": ["plugin:security/recommended"],
        "parserOptions": {
          "ecmaVersion": 2022
        },
        "env": {
          "es6": true,
          "node": true,
          "browser": true
        }
      }'
      Set-Content -Path ".eslintrc.json" -Value $eslintConfig

    # Create Python script for processing ESLint output
    - |
      $pythonScript = 'import sys
      import json
      
      try:
          for result in json.load(sys.stdin):
              for msg in result.get("messages", []):
                  print("{},{},{},{},{},{}".format(
                      result["filePath"],
                      msg.get("ruleId",""),
                      msg.get("severity",""),
                      msg.get("message","").replace(",", ";"),
                      msg.get("line",""),
                      msg.get("column","")
                  ))
      except json.JSONDecodeError:
          pass
      except Exception as e:
          print("Error processing file:", str(e), file=sys.stderr)'
      Set-Content -Path "process_eslint.py" -Value $pythonScript

    # Run JavaScript scans
    - |
      Write-Host "Scanning JavaScript/TypeScript files..."
      Get-ChildItem -Path "frontend\src" -Recurse -Include "*.js","*.jsx","*.ts","*.tsx" -Exclude "node_modules" | ForEach-Object {
        Write-Host "Scanning $($_.FullName)..."
        $result = eslint --format=json --quiet $_.FullName 2>$null
        if ($result) {
          $result | python process_eslint.py >> "$env:REPORT_DIR\js_sast.csv"
        }
      }

    # Generate summary report
    - |
      $reportContent = "# Security Scan Summary`n`n"
      $reportContent += "## Python Security Issues`n"
      $pythonCount = (Get-Content "$env:REPORT_DIR\python_sast.csv" | Measure-Object -Line).Lines - 1
      $reportContent += "$pythonCount issues found in Python code`n`n"
      $reportContent += "## JavaScript Security Issues`n"
      $jsCount = (Get-Content "$env:REPORT_DIR\js_sast.csv" | Measure-Object -Line).Lines - 1
      $reportContent += "$jsCount issues found in JavaScript code"
      Set-Content -Path "$env:REPORT_DIR\sast-report.txt" -Value $reportContent

  after_script:
    # Cleanup temporary files
    - Remove-Item -Path ".eslintrc.json", "process_eslint.py", "package.json", "package-lock.json", "node_modules" -Recurse -Force -ErrorAction SilentlyContinue

  artifacts:
    name: "${env:CI_JOB_NAME}-${env:CI_COMMIT_REF_NAME}"
    when: always
    expire_in: 1 week
    paths:
      - "${env:REPORT_DIR}\\*.csv"
      - "${env:REPORT_DIR}\\*.txt"
    reports:
      junit: "${env:REPORT_DIR}\\*.csv"
  
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_TAG
      when: never
