# .gitlab-ci.yml
stages:
  - security_scan
  - report_aggregation

variables:
  # All reports will be placed in this directory
  REPORT_DIR: "security_reports"

# Template job to ensure the reports directory exists
.security_scan_template:
  before_script:
    - |
      New-Item -ItemType Directory -Force -Path $env:REPORT_DIR | Out-Null

##########################
# Secret Detection Scan  #
##########################
secret-detection:
  stage: security_scan
  # Note: image is ignored for shell executors.
  extends: .security_scan_template
  script:
    - |
      Write-Host "Running Secret Detection Scan..."
      Write-Host "Assuming 'jq' is pre-installed on this Windows runner."
      pip install detect-secrets
      if ($LASTEXITCODE -ne 0) {
          Write-Host "detect-secrets installation failed"
          exit 1
      }
      detect-secrets scan . --force-use-all-plugins | jq -r '.results | to_entries | .[] | [.key, (.value[] | .type), (.value[] | .line_number)] | @csv' > "$env:REPORT_DIR\detected_secrets.csv"
      if ($LASTEXITCODE -ne 0) {
          Write-Host "Warning: Secret detection scan failed, continuing..."
          New-Item -Path "$env:REPORT_DIR\detected_secrets.csv" -ItemType File -Force | Out-Null
      }
  artifacts:
    paths:
      - $REPORT_DIR

###########################################
# Container Base Image Vulnerability Scan #
###########################################
container-base-scan:
  stage: security_scan
  # Assumes that trivy is installed and available in PATH on Windows.
  extends: .security_scan_template
  script:
    - |
      Write-Host "Running Container Base Image Vulnerability Scan..."
      ForEach ($dockerfile in Get-ChildItem -Path . -Filter "Dockerfile" -Recurse) {
          $baseImageLine = (Get-Content $dockerfile.FullName | Select-String "^FROM" | Select-Object -First 1).Line
          if ($baseImageLine) {
              $base_image = $baseImageLine.Split()[1]
              Write-Host "Scanning base image: $base_image from $($dockerfile.FullName)"
              # Replace invalid filename characters with underscores
              $safeName = $dockerfile.FullName -replace '[\\/:]', '_'
              trivy image --format csv --output "$env:REPORT_DIR\container_base_$safeName.csv" $base_image
              if ($LASTEXITCODE -ne 0) {
                  Write-Host "Warning: Trivy scan failed for $($dockerfile.FullName), skipping..."
              }
          }
          else {
              Write-Host "No FROM line found in $($dockerfile.FullName), skipping..."
          }
      }
  artifacts:
    paths:
      - $REPORT_DIR

###############################
# SAST (Static Application Security Testing)
###############################
sast-scan:
  stage: security_scan
  extends: .security_scan_template
  script:
    - |
      Write-Host "Running SAST Scan..."
      Write-Host "Assuming jq, nodejs, and npm are pre-installed on this Windows runner."
      pip install bandit
      if ($LASTEXITCODE -ne 0) {
          Write-Host "bandit installation failed"
          exit 1
      }
      bandit -r . -f csv -o "$env:REPORT_DIR\python_sast_results.csv"
      if ($LASTEXITCODE -ne 0) {
          Write-Host "Warning: Python SAST scan failed, continuing..."
          New-Item -Path "$env:REPORT_DIR\python_sast_results.csv" -ItemType File -Force | Out-Null
      }
      npm install -g eslint eslint-config-security
      if ($LASTEXITCODE -ne 0) {
          Write-Host "ESLint installation failed"
          exit 1
      }
      $jsFiles = Get-ChildItem -Path . -Recurse -Include *.js | Where-Object { $_.FullName -notmatch "node_modules" }
      if ($jsFiles.Count -eq 0) {
          Write-Host "No JavaScript files found; creating empty ESLint report"
          New-Item -Path "$env:REPORT_DIR\js_sast_results.csv" -ItemType File -Force | Out-Null
      }
      else {
          $output = ""
          foreach ($file in $jsFiles) {
              $result = eslint --format=json --no-eslintrc -c '{"extends": ["security"]}' $file.FullName
              $output += $result
          }
          if ($LASTEXITCODE -ne 0) {
              Write-Host "Warning: JavaScript SAST scan failed, continuing..."
              New-Item -Path "$env:REPORT_DIR\js_sast_results.csv" -ItemType File -Force | Out-Null
          }
          else {
              $output | Out-File "$env:REPORT_DIR\js_sast_results.csv" -Encoding utf8
          }
      }
  artifacts:
    paths:
      - $REPORT_DIR

#########################################
# Aggregate All Reports into a Summary  #
#########################################
aggregate-reports:
  stage: report_aggregation
  extends: .security_scan_template
  script:
    - |
      Write-Host "Creating summary report..."
      "Scan Type,Total Issues Found" | Out-File "$env:REPORT_DIR\summary_report.csv" -Encoding utf8
      if (Test-Path "$env:REPORT_DIR\detected_secrets.csv") {
          $secrets = (Get-Content "$env:REPORT_DIR\detected_secrets.csv" | Measure-Object -Line).Lines
      } else {
          $secrets = 0
      }
      "Detected Secrets,$secrets" | Out-File "$env:REPORT_DIR\summary_report.csv" -Append -Encoding utf8
      $containerFiles = Get-ChildItem -Path $env:REPORT_DIR -Filter "container_base_*.csv" -ErrorAction SilentlyContinue
      if ($containerFiles) {
          $containerCount = ($containerFiles | Get-Content | Measure-Object -Line).Lines
      } else {
          $containerCount = 0
      }
      "Container Base Image Scan,$containerCount" | Out-File "$env:REPORT_DIR\summary_report.csv" -Append -Encoding utf8
      if (Test-Path "$env:REPORT_DIR\python_sast_results.csv") {
          $sast_python = (Get-Content "$env:REPORT_DIR\python_sast_results.csv" | Measure-Object -Line).Lines
      } else {
          $sast_python = 0
      }
      "SAST (Python),$sast_python" | Out-File "$env:REPORT_DIR\summary_report.csv" -Append -Encoding utf8
      if (Test-Path "$env:REPORT_DIR\js_sast_results.csv") {
          $sast_js = (Get-Content "$env:REPORT_DIR\js_sast_results.csv" | Measure-Object -Line).Lines
      } else {
          $sast_js = 0
      }
      "SAST (JavaScript),$sast_js" | Out-File "$env:REPORT_DIR\summary_report.csv" -Append -Encoding utf8
  artifacts:
    paths:
      - $REPORT_DIR
