stages:
  - prebuild
  - security_scan

prebuild_checks:
  stage: prebuild
  image: python:3.10
  script:
    - powershell -Command "Set-StrictMode -Version Latest; python3.10 --version; if ($LASTEXITCODE -ne 0) { Write-Host 'Python 3.10 not found'; exit 1 }"
    - powershell -Command "python3.11 --version; if ($LASTEXITCODE -ne 0) { Write-Host 'Python 3.11 not found'; exit 1 }"
    - powershell -Command "if (-Not (Test-Path 'app/data/logs')) { New-Item -Force -ItemType Directory -Path 'app/data/logs' } else { Write-Host 'Directory already exists' }"
    - powershell -Command "Get-ChildItem -Path 'app/data/logs'"
  artifacts:
    paths:
      - "app/data/logs"

security_scan:
  stage: security_scan
  image: python:3.10
  script:
    - powershell -Command "Set-StrictMode -Version Latest; pip install bandit safety trufflehog"
    # Run Bandit for static analysis and output JSON report
    - powershell -Command "bandit -r . -f json -o bandit_sast_report.json; if ($LASTEXITCODE -ne 0) { Write-Host 'Bandit returned a non-zero exit code but continuing' }"
    # Convert Bandit JSON report to CSV with extra column "Security Mitigation Approach"
    - powershell -Command "
         try { python -c \"import json; json.load(open('bandit_sast_report.json'))\" | Out-Null } catch { exit 1 };
         if ($LASTEXITCODE -eq 0) {
             python -c \"import json, csv; report=json.load(open('bandit_sast_report.json')); f=csv.writer(open('bandit_sast_report.csv','w',newline='')); f.writerow([''filename'',''line_number'',''issue_severity'',''issue_confidence'',''issue_text'',''test_name'',''Security Mitigation Approach'']); [f.writerow([item.get(''filename''), item.get(''line_number''), item.get(''issue_severity''), item.get(''issue_confidence''), item.get(''issue_text''), item.get(''test_name''), '']) for item in report.get(''results'', [])]\" 
         } else {
             Write-Host 'bandit_sast_report.json is not valid JSON, skipping CSV conversion';
             'filename,line_number,issue_severity,issue_confidence,issue_text,test_name,Security Mitigation Approach' | Out-File -Encoding ascii bandit_sast_report.csv
         }"
    # Run Safety for dependency vulnerability checks and output JSON report
    - powershell -Command "safety check --json > safety_dependency_report.json; if ($LASTEXITCODE -ne 0) { Write-Host 'Safety check encountered issues, continuing' }"
    # Convert Safety JSON output to CSV with extra column
    - powershell -Command "
         try { python -c \"import json; json.load(open('safety_dependency_report.json'))\" | Out-Null } catch { exit 1 };
         if ($LASTEXITCODE -eq 0) {
             python -c \"import json, csv; data=json.load(open('safety_dependency_report.json')); f=csv.writer(open('safety_dependency_report.csv','w',newline='')); f.writerow([''package'',''version'',''Security Mitigation Approach'']); [f.writerow([pkg.get(''package''), pkg.get(''version''), '']) for pkg in data.get(''vulnerabilities'', [])]\" 
         } else {
             Write-Host 'safety_dependency_report.json is not valid JSON, skipping CSV conversion';
             'package,version,Security Mitigation Approach' | Out-File -Encoding ascii safety_dependency_report.csv
         }"
    # Run TruffleHog for secret detection and output JSON report
    - powershell -Command "trufflehog filesystem . --json > trufflehog_secret_detection.json; if ($LASTEXITCODE -ne 0) { Write-Host 'TruffleHog encountered issues, continuing' }"
    # Convert TruffleHog JSON output to CSV with extra column
    - powershell -Command "
         try { python -c \"import json; json.load(open('trufflehog_secret_detection.json'))\" | Out-Null } catch { exit 1 };
         if ($LASTEXITCODE -eq 0) {
             python -c \"import json, csv; data=json.load(open('trufflehog_secret_detection.json')); f=csv.writer(open('trufflehog_secret_detection.csv','w',newline='')); f.writerow([''file'',''line'',''reason'',''entropy'',''Security Mitigation Approach'']); [f.writerow([item.get(''file''), item.get(''line''), item.get(''reason''), item.get(''entropy''), '']) for item in data]\" 
         } else {
             Write-Host 'trufflehog_secret_detection.json is not valid JSON, skipping CSV conversion';
             'file,line,reason,entropy,Security Mitigation Approach' | Out-File -Encoding ascii trufflehog_secret_detection.csv
         }"
  artifacts:
    paths:
      - bandit_sast_report.json
      - bandit_sast_report.csv
      - safety_dependency_report.json
      - safety_dependency_report.csv
      - trufflehog_secret_detection.json
      - trufflehog_secret_detection.csv
