# .gitlab-ci.yml
stages:
  - security_scan
  - report_aggregation

variables:
  # Configure output directories for artifacts
  REPORT_DIR: "security_reports"
  
# Base security scanning job template
.security_scan_template:
  before_script:
    - mkdir -p $REPORT_DIR

# Secret detection scan
secret-detection:
  stage: security_scan
  image: python:3.11-slim
  extends: .security_scan_template
  script:
    - pip install detect-secrets jq
    - |
      detect-secrets scan . --force-use-all-plugins > "$REPORT_DIR/secrets.json"
      if [ -s "$REPORT_DIR/secrets.json" ]; then
        jq -r '
          .results | to_entries[] |
          [.key, (.value[] | .type, .line_number)] | @csv
        ' "$REPORT_DIR/secrets.json" > "$REPORT_DIR/detected_secrets.csv"
      else
        echo "No secrets detected" > "$REPORT_DIR/detected_secrets.csv"
      fi
  artifacts:
    paths:
      - $REPORT_DIR/detected_secrets.csv
      - $REPORT_DIR/secrets.json
    expire_in: 1 week

# Container base image scan
container-base-scan:
  stage: security_scan
  image: aquasec/trivy:latest
  extends: .security_scan_template
  script:
    - |
      find . -name "Dockerfile" -type f | while read -r dockerfile; do
        echo "Scanning $dockerfile"
        basename=$(echo "$dockerfile" | tr '/' '_')
        base_image=$(grep "^FROM" "$dockerfile" | head -1 | awk '{print $2}')
        echo "Scanning base image: $base_image"
        trivy image --format json --output "$REPORT_DIR/${basename}_scan.json" "$base_image"
        trivy image --format csv --output "$REPORT_DIR/${basename}_scan.csv" "$base_image"
      done
  artifacts:
    paths:
      - $REPORT_DIR/*_scan.csv
      - $REPORT_DIR/*_scan.json
    expire_in: 1 week

# SAST (Static Application Security Testing)
sast-scan:
  stage: security_scan
  image: python:3.11-slim
  extends: .security_scan_template
  script:
    - pip install bandit
    - apt-get update && apt-get install -y nodejs npm jq
    - npm install -g eslint eslint-config-security
    - |
      # Scan Python files
      echo "Running Python SAST scan..."
      bandit -r . -f json -o "$REPORT_DIR/python_sast.json" || true
      if [ -s "$REPORT_DIR/python_sast.json" ]; then
        jq -r '.results[] | [.filename, .issue_severity, .issue_text, .line_number] | @csv' \
          "$REPORT_DIR/python_sast.json" > "$REPORT_DIR/python_sast_results.csv"
      else
        echo "No Python security issues found" > "$REPORT_DIR/python_sast_results.csv"
      fi
    - |
      # Scan JavaScript files
      echo "Running JavaScript SAST scan..."
      find . -name "*.js" -not -path "./node_modules/*" -type f | while read -r js_file; do
        eslint --format=json --no-eslintrc -c '{"extends": ["security"]}' "$js_file" >> "$REPORT_DIR/js_sast.json" 2>/dev/null || true
      done
      if [ -s "$REPORT_DIR/js_sast.json" ]; then
        jq -r '.[] | select(.messages[].ruleId != null) | 
          .messages[] | [.ruleId, .severity, .message, .line] | @csv' \
          "$REPORT_DIR/js_sast.json" > "$REPORT_DIR/js_sast_results.csv"
      else
        echo "No JavaScript security issues found" > "$REPORT_DIR/js_sast_results.csv"
      fi
  artifacts:
    paths:
      - $REPORT_DIR/python_sast*.csv
      - $REPORT_DIR/python_sast*.json
      - $REPORT_DIR/js_sast*.csv
      - $REPORT_DIR/js_sast*.json
    expire_in: 1 week

# Aggregate all reports
aggregate-reports:
  stage: report_aggregation
  image: python:3.11-slim
  script:
    - |
      echo "Creating summary report..."
      echo "Security Scan Summary" > "$REPORT_DIR/summary_report.csv"
      echo "Scan Type,Total Issues Found,High Severity,Medium Severity,Low Severity" >> "$REPORT_DIR/summary_report.csv"
      
      # Function to count CSV lines excluding header
      count_csv_issues() {
        if [ -f "$1" ]; then
          tail -n +2 "$1" | wc -l
        else
          echo "0"
        fi
      }
      
      # Count secrets
      secrets=$(count_csv_issues "$REPORT_DIR/detected_secrets.csv")
      echo "Detected Secrets,$secrets,N/A,N/A,N/A" >> "$REPORT_DIR/summary_report.csv"
      
      # Count container vulnerabilities
      container_issues=$(find "$REPORT_DIR" -name "*_scan.csv" -exec cat {} \; | wc -l)
      echo "Container Security,$container_issues,N/A,N/A,N/A" >> "$REPORT_DIR/summary_report.csv"
      
      # Count SAST issues
      sast_python=$(count_csv_issues "$REPORT_DIR/python_sast_results.csv")
      sast_js=$(count_csv_issues "$REPORT_DIR/js_sast_results.csv")
      echo "SAST (Python),$sast_python,N/A,N/A,N/A" >> "$REPORT_DIR/summary_report.csv"
      echo "SAST (JavaScript),$sast_js,N/A,N/A,N/A" >> "$REPORT_DIR/summary_report.csv"
  artifacts:
    paths:
      - $REPORT_DIR/*
    expire_in: 1 week
