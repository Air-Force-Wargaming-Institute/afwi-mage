# .gitlab-ci.yml
stages:
  - security_scan
  - report_aggregation

variables:
  # Define the directory where all reports will be stored
  REPORT_DIR: "security_reports"

# A base template to ensure the reports directory exists
.security_scan_template:
  before_script:
    - mkdir -p $REPORT_DIR

#########################################
# Python Dependency Vulnerability Scan  #
#########################################
python-dependency-scan:
  stage: security_scan
  image: python:3.11-slim
  extends: .security_scan_template
  script:
    # Install jq for JSON processing and safety for vulnerability scanning
    - apt-get update && apt-get install -y jq
    - pip install safety
    - |
      for req_file in $(find . -name "requirements.txt"); do
        echo "Scanning $req_file"
        safety check -r "$req_file" --output json | jq -r '.[] | [.package, .analyzed_version, .vulnerable_spec, .advisory] | @csv' \
          > "$REPORT_DIR/python_dependencies_$(echo "$req_file" | tr '/' '_').csv"
      done
  artifacts:
    paths:
      - $REPORT_DIR

#########################################
# Node.js Dependency Vulnerability Scan #
#########################################
node-dependency-scan:
  stage: security_scan
  image: node:16
  extends: .security_scan_template
  script:
    # Install jq and required npm package(s)
    - apt-get update && apt-get install -y jq
    - npm install -g npm-audit-html
    - |
      for pkg_file in $(find . -name "package.json"); do
        echo "Scanning $pkg_file"
        cd "$(dirname "$pkg_file")"
        npm audit --json | jq -r '.advisories | to_entries | .[] | .value | [.module_name, .vulnerable_versions, .patched_versions, .title] | @csv' \
          > "$CI_PROJECT_DIR/$REPORT_DIR/node_dependencies_$(echo "$pkg_file" | tr '/' '_').csv"
        cd "$CI_PROJECT_DIR"
      done
  artifacts:
    paths:
      - $REPORT_DIR

##########################
# Secret Detection Scan  #
##########################
secret-detection:
  stage: security_scan
  image: python:3.11-slim
  extends: .security_scan_template
  script:
    # Install jq and detect-secrets
    - apt-get update && apt-get install -y jq
    - pip install detect-secrets
    - detect-secrets scan . --force-use-all-plugins | \
      jq -r '.results | to_entries | .[] | [.key, (.value[] | .type), (.value[] | .line_number)] | @csv' \
      > "$REPORT_DIR/detected_secrets.csv"
  artifacts:
    paths:
      - $REPORT_DIR

#######################################
# Container Base Image Vulnerability Scan
#######################################
container-base-scan:
  stage: security_scan
  image: aquasec/trivy:latest
  extends: .security_scan_template
  script:
    - |
      for dockerfile in $(find . -name "Dockerfile"); do
        base_image=$(grep "^FROM" "$dockerfile" | head -1 | awk '{print $2}')
        echo "Scanning base image: $base_image from $dockerfile"
        trivy image --format csv --output "$REPORT_DIR/container_base_$(echo "$dockerfile" | tr '/' '_').csv" "$base_image"
      done
  artifacts:
    paths:
      - $REPORT_DIR

###############################
# SAST (Static Application Security Testing)
###############################
sast-scan:
  stage: security_scan
  image: python:3.11-slim
  extends: .security_scan_template
  script:
    # Install necessary packages: jq, nodejs, npm, and bandit for Python SAST
    - apt-get update && apt-get install -y jq nodejs npm
    - pip install bandit
    # Run Bandit on Python files and output CSV
    - bandit -r . -f csv -o "$REPORT_DIR/python_sast_results.csv" || true
    # Install ESLint with security rules for JavaScript scanning
    - npm install -g eslint eslint-config-security
    - |
      find . -name "*.js" -not -path "./node_modules/*" | xargs eslint --format=json --no-eslintrc -c '{"extends": ["security"]}' | \
      jq -r '.[] | (.filePath) as $file | .messages[]? | [$file, .ruleId, .message, .line] | @csv' \
      > "$REPORT_DIR/js_sast_results.csv" || true
  artifacts:
    paths:
      - $REPORT_DIR

#########################################
# Aggregate All Reports into a Summary  #
#########################################
aggregate-reports:
  stage: report_aggregation
  image: python:3.11-slim
  script:
    - mkdir -p $REPORT_DIR
    - echo "Creating summary report..."
    - echo "Scan Type,Total Issues Found" > "$REPORT_DIR/summary_report.csv"
    - |
      if ls $REPORT_DIR/python_dependencies_*.csv 1> /dev/null 2>&1; then
        python_deps=$(find $REPORT_DIR -name "python_dependencies_*.csv" -exec cat {} + | wc -l)
      else
        python_deps=0
      fi
      echo "Python Dependencies,$python_deps" >> "$REPORT_DIR/summary_report.csv"
    - |
      if ls $REPORT_DIR/node_dependencies_*.csv 1> /dev/null 2>&1; then
        node_deps=$(find $REPORT_DIR -name "node_dependencies_*.csv" -exec cat {} + | wc -l)
      else
        node_deps=0
      fi
      echo "Node.js Dependencies,$node_deps" >> "$REPORT_DIR/summary_report.csv"
    - |
      if [ -f "$REPORT_DIR/detected_secrets.csv" ]; then
        secrets=$(cat "$REPORT_DIR/detected_secrets.csv" | wc -l)
      else
        secrets=0
      fi
      echo "Detected Secrets,$secrets" >> "$REPORT_DIR/summary_report.csv"
    - |
      if [ -f "$REPORT_DIR/python_sast_results.csv" ]; then
        sast_python=$(cat "$REPORT_DIR/python_sast_results.csv" | wc -l)
      else
        sast_python=0
      fi
      echo "SAST (Python),$sast_python" >> "$REPORT_DIR/summary_report.csv"
    - |
      if [ -f "$REPORT_DIR/js_sast_results.csv" ]; then
        sast_js=$(cat "$REPORT_DIR/js_sast_results.csv" | wc -l)
      else
        sast_js=0
      fi
      echo "SAST (JavaScript),$sast_js" >> "$REPORT_DIR/summary_report.csv"
  artifacts:
    paths:
      - $REPORT_DIR
