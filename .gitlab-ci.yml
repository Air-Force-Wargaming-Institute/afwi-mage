stages: 
  - prebuild
  - security_scan

prebuild_checks:
  stage: prebuild
  image: python:3.10
  script:
    - set -x
    - python3.10 --version || (echo "Python 3.10 not found" && exit 1)
    - python3.11 --version || (echo "Python 3.11 not found" && exit 1)
    - mkdir -p app/data/logs
    - ls -ld app/data/logs
  artifacts:
    paths:
      - app/data/logs

security_scan:
  stage: security_scan
  image: python:3.10
  script:
    - set -x
    # Install scanning tools
    - pip install bandit safety trufflehog
    # Run Bandit for static analysis; output JSON
    - bandit -r . -f json -o sast_report.json || true
    # Run Safety for dependency vulnerability checks; output JSON
    - safety check --json > dependency_check.json || true
    # Convert Safety output JSON to CSV if valid, otherwise create a default CSV header
    - |
      if python -c "import json; json.load(open('dependency_check.json'))" 2>/dev/null; then 
        python -c "import json, csv; data=json.load(open('dependency_check.json')); csvfile=open('dependency_check.csv','w',newline=''); writer=csv.writer(csvfile); writer.writerow(['package','version']); [writer.writerow([pkg.get('package'), pkg.get('version')]) for pkg in data.get('vulnerabilities',[])]; csvfile.close()"
      else 
        echo "dependency_check.json is not valid JSON, skipping CSV conversion"
        echo "package,version" > dependency_check.csv
      fi
    # Run TruffleHog to scan for secrets; output JSON
    - trufflehog filesystem . --json > secret_detection.json || true
  artifacts:
    paths:
      - sast_report.json
      - dependency_check.json
      - dependency_check.csv
      - secret_detection.json
