# .gitlab-ci.yml
stages:
  - security_scan
  - report_aggregation

variables:
  # Configure output directories for artifacts
  REPORT_DIR: "security_reports"
  
# Base security scanning job template
.security_scan_template:
  before_script:
    - mkdir -p $REPORT_DIR

# Python dependency security scan
python-dependency-scan:
  stage: security_scan
  image: python:3.11-slim
  extends: .security_scan_template
  script:
    - pip install safety jq
    - |
      find . -name "requirements.txt" -type f | while read -r req_file; do
        echo "Scanning $req_file"
        dirname=$(dirname "$req_file")
        basename=$(basename "$dirname")
        safety check -r "$req_file" --json > "$REPORT_DIR/${basename}_dependencies.json"
        if [ -s "$REPORT_DIR/${basename}_dependencies.json" ]; then
          jq -r '.[] | [.package,.analyzed_version,.vulnerable_spec,.advisory] | @csv' \
            "$REPORT_DIR/${basename}_dependencies.json" > "$REPORT_DIR/${basename}_dependencies.csv"
        else
          echo "No vulnerabilities found in $req_file" > "$REPORT_DIR/${basename}_dependencies.csv"
        fi
      done
  artifacts:
    paths:
      - $REPORT_DIR/*_dependencies.csv
      - $REPORT_DIR/*_dependencies.json
    expire_in: 1 week

# Node.js dependency security scan
node-dependency-scan:
  stage: security_scan
  image: node:16
  extends: .security_scan_template
  script:
    - New-Item -ItemType Directory -Force -Path $env:REPORT_DIR
    - |
      $packageFiles = Get-ChildItem -Path . -Filter "package.json" -Recurse
      foreach ($pkgFile in $packageFiles) {
        Write-Host "Scanning $($pkgFile.FullName)"
        $dirname = $pkgFile.Directory.Name
        
        # Create temp directory
        $tempDir = New-Item -ItemType Directory -Path (Join-Path $env:TEMP ([System.Guid]::NewGuid().ToString())) -Force
        
        try {
          # Copy package files
          Copy-Item $pkgFile.FullName -Destination $tempDir
          if (Test-Path (Join-Path $pkgFile.Directory.FullName "package-lock.json")) {
            Copy-Item (Join-Path $pkgFile.Directory.FullName "package-lock.json") -Destination $tempDir
          }
          
          # Change to temp directory
          Push-Location $tempDir
          
          # Run npm audit
          $auditResult = npm audit --json | ConvertFrom-Json
          
          # Create CSV report
          $csvPath = Join-Path $env:CI_PROJECT_DIR $env:REPORT_DIR "${dirname}_npm_audit.csv"
          $jsonPath = Join-Path $env:CI_PROJECT_DIR $env:REPORT_DIR "${dirname}_npm_audit.json"
          
          if ($auditResult.advisories) {
            $auditResult.advisories.PSObject.Properties | ForEach-Object {
              $advisory = $_.Value
              "$($advisory.module_name),$($advisory.vulnerable_versions),$($advisory.patched_versions),$($advisory.severity),$($advisory.title)" |
                Out-File -FilePath $csvPath -Append -Encoding UTF8
            }
          } else {
            "No vulnerabilities found in $($pkgFile.Name)" | Out-File -FilePath $csvPath -Encoding UTF8
          }
          
          # Save JSON report
          $auditResult | ConvertTo-Json -Depth 10 | Out-File -FilePath $jsonPath -Encoding UTF8
          
          # Return to original directory
          Pop-Location
          
        } catch {
          Write-Host "Error processing $($pkgFile.FullName): $_"
          "Error scanning $($pkgFile.Name)" | Out-File -FilePath $csvPath -Encoding UTF8
        } finally {
          # Cleanup
          if (Test-Path $tempDir) {
            Remove-Item -Path $tempDir -Recurse -Force
          }
        }
      }
  artifacts:
    paths:
      - $env:REPORT_DIR/*_npm_audit.csv
      - $env:REPORT_DIR/*_npm_audit.json
    expire_in: 1 week

# Secret detection scan
secret-detection:
  stage: security_scan
  image: python:3.11-slim
  extends: .security_scan_template
  script:
    - pip install detect-secrets
    - |
      detect-secrets scan . --force-use-all-plugins | 
      jq -r '.results | to_entries | .[] | [.key, .value[].type, .value[].line_number] | @csv' > 
      $REPORT_DIR/detected_secrets.csv
  artifacts:
    paths:
      - $REPORT_DIR/detected_secrets.csv
    expire_in: 1 week

# Container base image scan
container-base-scan:
  stage: security_scan
  image: aquasec/trivy:latest
  extends: .security_scan_template
  script:
    - |
      for dockerfile in $(find . -name "Dockerfile"); do
        base_image=$(grep "^FROM" $dockerfile | head -1 | awk '{print $2}')
        echo "Scanning base image: $base_image from $dockerfile"
        trivy image --format csv --output $REPORT_DIR/container_base_$(echo $dockerfile | tr '/' '_').csv $base_image
      done
  artifacts:
    paths:
      - $REPORT_DIR/container_base_*.csv
    expire_in: 1 week

# SAST (Static Application Security Testing)
sast-scan:
  stage: security_scan
  image: python:3.11-slim
  extends: .security_scan_template
  script:
    - pip install bandit
    - |
      # Scan Python files
      bandit -r . -f csv -o $REPORT_DIR/python_sast_results.csv
    - |
      # Install and run ESLint for JavaScript files
      apt-get update && apt-get install -y nodejs npm
      npm install -g eslint eslint-config-security
      find . -name "*.js" -not -path "./node_modules/*" | 
      xargs eslint --format=json --no-eslintrc -c '{"extends": ["security"]}' |
      jq -r '.[] | [.filePath, .messages[].ruleId, .messages[].message, .messages[].line] | @csv' > 
      $REPORT_DIR/js_sast_results.csv
  artifacts:
    paths:
      - $REPORT_DIR/python_sast_results.csv
      - $REPORT_DIR/js_sast_results.csv
    expire_in: 1 week

# Aggregate all reports
aggregate-reports:
  stage: report_aggregation
  image: python:3.11-slim
  script:
    - |
      echo "Creating summary report..."
      echo "Security Scan Summary" > $REPORT_DIR/summary_report.csv
      echo "Scan Type,Total Issues Found,High Severity,Medium Severity,Low Severity" >> $REPORT_DIR/summary_report.csv
      
      # Count issues in Python dependencies
      python_deps=$(find $REPORT_DIR -name "python_dependencies_*.csv" | xargs cat | wc -l)
      echo "Python Dependencies,$python_deps,N/A,N/A,N/A" >> $REPORT_DIR/summary_report.csv
      
      # Count issues in Node.js dependencies
      node_deps=$(find $REPORT_DIR -name "node_dependencies_*.csv" | xargs cat | wc -l)
      echo "Node.js Dependencies,$node_deps,N/A,N/A,N/A" >> $REPORT_DIR/summary_report.csv
      
      # Count detected secrets
      secrets=$(cat $REPORT_DIR/detected_secrets.csv | wc -l)
      echo "Detected Secrets,$secrets,N/A,N/A,N/A" >> $REPORT_DIR/summary_report.csv
      
      # Count SAST issues
      sast_python=$(cat $REPORT_DIR/python_sast_results.csv | wc -l)
      sast_js=$(cat $REPORT_DIR/js_sast_results.csv | wc -l)
      echo "SAST (Python),$sast_python,N/A,N/A,N/A" >> $REPORT_DIR/summary_report.csv
      echo "SAST (JavaScript),$sast_js,N/A,N/A,N/A" >> $REPORT_DIR/summary_report.csv
  artifacts:
    paths:
      - $REPORT_DIR/*
    expire_in: 1 week
