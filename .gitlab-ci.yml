# .gitlab-ci.yml
stages:
  - security_scan
  - report_aggregation

variables:
  # Configure output directories for artifacts
  REPORT_DIR: "security_reports"
  
# Base security scanning job template
.security_scan_template:
  before_script:
    - mkdir -p $REPORT_DIR

# Secret detection scan
secret-detection:
  stage: security_scan
  image: python:3.11-slim
  extends: .security_scan_template
  script:
    - |
      Write-Host "Installing detect-secrets..."
      pip install detect-secrets
      
      Write-Host "Running secret detection scan..."
      detect-secrets scan . --force-use-all-plugins | Out-File -FilePath "$env:REPORT_DIR/secrets.json"
      
      Write-Host "Processing results..."
      if (Test-Path "$env:REPORT_DIR/secrets.json") {
        $content = Get-Content "$env:REPORT_DIR/secrets.json" | ConvertFrom-Json
        if ($content.results.PSObject.Properties.Count -gt 0) {
          $results = @()
          foreach ($file in $content.results.PSObject.Properties) {
            foreach ($finding in $file.Value) {
              $results += [PSCustomObject]@{
                File = $file.Name
                Type = $finding.type
                LineNumber = $finding.line_number
              }
            }
          }
          $results | Export-Csv -Path "$env:REPORT_DIR/detected_secrets.csv" -NoTypeInformation
        } else {
          "File,Type,LineNumber`nNo secrets detected" | Out-File -FilePath "$env:REPORT_DIR/detected_secrets.csv"
        }
      } else {
        "File,Type,LineNumber`nScan failed" | Out-File -FilePath "$env:REPORT_DIR/detected_secrets.csv"
      }
  artifacts:
    paths:
      - $env:REPORT_DIR/detected_secrets.csv
      - $env:REPORT_DIR/secrets.json
    expire_in: 1 week

# Container base image scan
container-base-scan:
  stage: security_scan
  image: aquasec/trivy:latest
  extends: .security_scan_template
  script:
    - |
      Write-Host "Starting container base image scan..."
      Get-ChildItem -Path . -Filter "Dockerfile" -Recurse | ForEach-Object {
        Write-Host "Scanning $($_.FullName)"
        $dockerfile = $_.FullName
        $basename = $_.Directory.Name
        
        # Get base image from Dockerfile
        $baseImage = Get-Content $dockerfile | Where-Object { $_ -match '^FROM\s+(.+)' } | 
                    Select-Object -First 1 | ForEach-Object { $matches[1] }
        
        Write-Host "Found base image: $baseImage"
        
        # Scan the base image
        trivy image --format json --output "$env:REPORT_DIR/${basename}_scan.json" $baseImage
        trivy image --format csv --output "$env:REPORT_DIR/${basename}_scan.csv" $baseImage
      }
  artifacts:
    paths:
      - $env:REPORT_DIR/*_scan.csv
      - $env:REPORT_DIR/*_scan.json
    expire_in: 1 week

# SAST (Static Application Security Testing)
sast-scan:
  stage: security_scan
  image: python:3.11-slim
  extends: .security_scan_template
  script:
    - pip install bandit
    - pip install jq
    # Install Node.js using proper Windows commands
    - |
      Write-Host "Installing Node.js and npm..."
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      Invoke-WebRequest -Uri https://nodejs.org/dist/v16.20.2/node-v16.20.2-x64.msi -OutFile node.msi
      Start-Process msiexec.exe -Wait -ArgumentList '/i node.msi /quiet'
      $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine")
    - |
      Write-Host "Installing ESLint and security plugins..."
      npm install -g eslint
      npm install -g eslint-plugin-security
    - |
      Write-Host "Running Python SAST scan..."
      bandit -r . -f json -o "$env:REPORT_DIR/python_sast.json"
      if (Test-Path "$env:REPORT_DIR/python_sast.json") {
        Get-Content "$env:REPORT_DIR/python_sast.json" | 
          ConvertFrom-Json | 
          Select-Object -ExpandProperty results | 
          ForEach-Object {
            "$($_.filename),$($_.issue_severity),$($_.issue_text),$($_.line_number)"
          } | Out-File -FilePath "$env:REPORT_DIR/python_sast_results.csv"
      } else {
        "No Python security issues found" | Out-File -FilePath "$env:REPORT_DIR/python_sast_results.csv"
      }
    - |
      Write-Host "Running JavaScript SAST scan..."
      Get-ChildItem -Path . -Filter "*.js" -Recurse -Exclude "node_modules" | 
        ForEach-Object {
          Write-Host "Scanning $($_.FullName)"
          eslint --format=json --no-eslintrc -c "{`"plugins`":[`"security`"],`"extends`":[`"plugin:security/recommended`"]}" $_.FullName |
            Out-File -Append -FilePath "$env:REPORT_DIR/js_sast.json"
        }
      if (Test-Path "$env:REPORT_DIR/js_sast.json") {
        Get-Content "$env:REPORT_DIR/js_sast.json" | 
          ConvertFrom-Json | 
          ForEach-Object { $_.messages } | 
          Where-Object { $_.ruleId -ne $null } |
          ForEach-Object {
            "$($_.ruleId),$($_.severity),$($_.message),$($_.line)"
          } | Out-File -FilePath "$env:REPORT_DIR/js_sast_results.csv"
      } else {
        "No JavaScript security issues found" | Out-File -FilePath "$env:REPORT_DIR/js_sast_results.csv"
      }
  artifacts:
    paths:
      - $env:REPORT_DIR/python_sast*.csv
      - $env:REPORT_DIR/python_sast*.json
      - $env:REPORT_DIR/js_sast*.csv
      - $env:REPORT_DIR/js_sast*.json
    expire_in: 1 week

# Aggregate all reports
aggregate-reports:
  stage: report_aggregation
  image: python:3.11-slim
  script:
    - |
      echo "Creating summary report..."
      echo "Security Scan Summary" > "$REPORT_DIR/summary_report.csv"
      echo "Scan Type,Total Issues Found,High Severity,Medium Severity,Low Severity" >> "$REPORT_DIR/summary_report.csv"
      
      # Function to count CSV lines excluding header
      count_csv_issues() {
        if [ -f "$1" ]; then
          tail -n +2 "$1" | wc -l
        else
          echo "0"
        fi
      }
      
      # Count secrets
      secrets=$(count_csv_issues "$REPORT_DIR/detected_secrets.csv")
      echo "Detected Secrets,$secrets,N/A,N/A,N/A" >> "$REPORT_DIR/summary_report.csv"
      
      # Count container vulnerabilities
      container_issues=$(find "$REPORT_DIR" -name "*_scan.csv" -exec cat {} \; | wc -l)
      echo "Container Security,$container_issues,N/A,N/A,N/A" >> "$REPORT_DIR/summary_report.csv"
      
      # Count SAST issues
      sast_python=$(count_csv_issues "$REPORT_DIR/python_sast_results.csv")
      sast_js=$(count_csv_issues "$REPORT_DIR/js_sast_results.csv")
      echo "SAST (Python),$sast_python,N/A,N/A,N/A" >> "$REPORT_DIR/summary_report.csv"
      echo "SAST (JavaScript),$sast_js,N/A,N/A,N/A" >> "$REPORT_DIR/summary_report.csv"
  artifacts:
    paths:
      - $REPORT_DIR/*
    expire_in: 1 week
