## Sample Traefik Configuration for AFWI MAGE API Gateway

# Global Configuration
global:
  checkNewVersion: false
  sendAnonymousUsage: false

# API Dashboard
api:
  insecure: true  # Should be set to false in production with proper authentication
  dashboard: true

# Providers Configuration
providers:
  docker:
    endpoint: "unix:///var/run/docker.sock"
    exposedByDefault: false
    watch: true
    network: "afwi-multi-agent-generative-engine_app-network"

# Entry Points
entryPoints:
  web:
    address: ":80"
    # In production, add HTTP to HTTPS redirection
    # http:
    #   redirections:
    #     entryPoint:
    #       to: websecure
    #       scheme: https
  
  # For production, enable HTTPS
  # websecure:
  #   address: ":443"
  #   http:
  #     tls:
  #       certResolver: letsencrypt

# Middlewares
http:
  middlewares:
    # Authentication Middleware
    auth-jwt:
      forwardAuth:
        address: "http://auth:8010/api/users/validate-token"
        trustForwardHeader: true
    
    # Compression Middleware
    compress:
      compress: {}
    
    # CORS Middleware
    cors:
      headers:
        accessControlAllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
        accessControlAllowOriginList:
          - "http://localhost:3000"
          - "http://127.0.0.1:3000"
        accessControlAllowCredentials: true
        accessControlAllowHeaders:
          - "*"
        accessControlMaxAge: 100
    
    # Rate Limiting Middlewares
    rate-limit-high:
      rateLimit:
        average: 100
        burst: 50
    
    rate-limit-med:
      rateLimit:
        average: 50
        burst: 25
    
    rate-limit-low:
      rateLimit:
        average: 20
        burst: 10
    
    # Upload Middleware with larger timeouts
    upload-middleware:
      rateLimit:
        average: 10
        burst: 5
      headers:
        customRequestHeaders:
          X-Real-IP: "{{ .ClientIP }}"
          X-Forwarded-For: "{{ .ClientIP }}"
      retry:
        attempts: 3
        initialInterval: "1s"

# Router Rules
http:
  routers:
    # Core Service Routes
    core-router:
      rule: "PathPrefix(`/api/documents`) || Path(`/`)"
      service: core
      middlewares:
        - auth-jwt
        - compress
        - cors
        - rate-limit-med
      entryPoints:
        - web
    
    # Chat Service Routes
    chat-router:
      rule: "PathPrefix(`/chat`) || PathPrefix(`/sessions`) || PathPrefix(`/conversations`) || PathPrefix(`/api/prompts`)"
      service: chat
      middlewares:
        - auth-jwt
        - compress
        - cors
        - rate-limit-high
      entryPoints:
        - web
    
    # Direct Chat Service Routes - Supporting both old and new paths during transition
    direct-chat-router:
      rule: "PathPrefix(`/api/direct_chat`)"
      service: direct-chat
      middlewares:
        - auth-jwt
        - compress
        - cors
        - rate-limit-high
      entryPoints:
        - web
    
    # Auth Service Routes
    auth-router:
      rule: "PathPrefix(`/api/users`) || Path(`/api/health`)"
      service: auth
      middlewares:
        - compress
        - cors
        - rate-limit-med
      entryPoints:
        - web
    
    # Upload Service Routes
    upload-router:
      rule: "PathPrefix(`/api/upload`)"
      service: upload
      middlewares:
        - auth-jwt
        - compress
        - cors
        - upload-middleware
      entryPoints:
        - web
    
    # Agent Service Routes
    agent-router:
      rule: "PathPrefix(`/api/agents`)"
      service: agent
      middlewares:
        - auth-jwt
        - compress
        - cors
        - rate-limit-low
      entryPoints:
        - web
    
    # Embedding Service Routes
    embedding-router:
      rule: "PathPrefix(`/api/embed`)"
      service: embedding
      middlewares:
        - auth-jwt
        - compress
        - cors
        - rate-limit-high
      entryPoints:
        - web
    
    # Extraction Service Routes
    extraction-router:
      rule: "PathPrefix(`/api/extract`)"
      service: extraction
      middlewares:
        - auth-jwt
        - compress
        - cors
        - rate-limit-low
      entryPoints:
        - web
    
    # Generation Service Routes
    generation-router:
      rule: "PathPrefix(`/api/generate`)"
      service: generation
      middlewares:
        - auth-jwt
        - compress
        - cors
        - rate-limit-low
      entryPoints:
        - web
    
    # Review Service Routes
    review-router:
      rule: "PathPrefix(`/api/review`)"
      service: review
      middlewares:
        - auth-jwt
        - compress
        - cors
        - rate-limit-low
      entryPoints:
        - web

# Services
http:
  services:
    core:
      loadBalancer:
        servers:
          - url: "http://core:8000"
        healthCheck:
          path: /api/core/health
          interval: "10s"
          timeout: "5s"
    
    chat:
      loadBalancer:
        servers:
          - url: "http://chat:8009"
        healthCheck:
          path: /api/chat/health
          interval: "10s"
          timeout: "5s"
    
    direct-chat:
      loadBalancer:
        servers:
          - url: "http://direct_chat_service1:8011"
        passHostHeader: true
        healthCheck:
          path: /api/direct_chat/health
          interval: "10s"
          timeout: "5s"
    
    auth:
      loadBalancer:
        servers:
          - url: "http://auth:8010"
        healthCheck:
          path: /api/auth/health
          interval: "10s"
          timeout: "5s"
    
    upload:
      loadBalancer:
        servers:
          - url: "http://upload:8005"
        responseForwarding:
          flushInterval: "100ms"
        healthCheck:
          path: /api/upload/health
          interval: "10s"
          timeout: "5s"
    
    agent:
      loadBalancer:
        servers:
          - url: "http://agent:8001"
        healthCheck:
          path: /api/agent/health
          interval: "10s"
          timeout: "5s"
    
    embedding:
      loadBalancer:
        servers:
          - url: "http://embedding:8006"
        healthCheck:
          path: /api/embedding/health
          interval: "10s"
          timeout: "5s"
    
    extraction:
      loadBalancer:
        servers:
          - url: "http://extraction:8002"
        healthCheck:
          path: /api/extraction/health
          interval: "10s"
          timeout: "5s"
    
    generation:
      loadBalancer:
        servers:
          - url: "http://generation:8003"
        healthCheck:
          path: /api/generation/health
          interval: "10s"
          timeout: "5s"
    
    review:
      loadBalancer:
        servers:
          - url: "http://review:8004"
        healthCheck:
          path: /api/review/health
          interval: "10s"
          timeout: "5s"

# For production, add TLS configuration
# certificatesResolvers:
#   letsencrypt:
#     acme:
#       email: admin@example.com
#       storage: /etc/traefik/acme/acme.json
#       httpChallenge:
#         entryPoint: web 